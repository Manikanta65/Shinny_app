fit = glm(y ~ x1+x2, data= dataset, family='poisson')
summary(fit)
data <- head(mtcars)
data
dataset <- na.omit(data.frame( x1,x2,x3,y))
data <- head(mtcars)
data
x1=data$am
x2=data$cyl
x3=data$hp
y=data$wt
dataset <- na.omit(data.frame( x1,x2,x3,y))
fit = glm(y ~ x1+x2+x3, data= dataset, family='binomial')
fit = glm(y ~ x1+x2+x3, data= dataset, family='binomial')
summary(fit)
dataset <- na.omit(data.frame( x1,x2,x3,y))
fit = glm(y ~ x1+x2+x3, data= dataset, family='binomial')
data <- head(mtcars)
data
y=data$am
x1=data$cyl
x2=data$hp
x3=data$wt
df=data.frame( x1,x2,x3,y)
dataset=na.omit(df)
trainset.glm <- glm(y ~.,dataset, family="binomial")
trainset.glm <- glm(y ~.,dataset, family="binomial")
trainset.glm <- glm(y ~.,data = dataset, family="binomial")
trainset.glm <- glm(y ~.,dataset, family="binomial")
data <- mtcars
data
y=data$am
x1=data$cyl
x2=data$hp
x3=data$wt
df=data.frame( x1,x2,x3,y)
dataset=na.omit(df)
trainset.glm <- glm(y ~.,dataset, family="binomial")
summary(trainset.glm)
data<- read.csv(url("https://stats.idre.ucla.edu/stat/data/binary.csv"))
data
y=data$admit
x1=data$gre
x2=data$gpa
x3=data$rank
df=data.frame( x1,x2,x3,y)
dataset=na.omit(df)
trainset.glm <- glm(y ~.,dataset, family="binary")
trainset.glm <- glm(y ~.,dataset, family="binomial")
summary(trainset.glm)
newdata=c(1,80)
that_i=sum(coef(fit)*newdata)
yhat_i=that_i
install.packages('RODBC')
require(RODBC)
conn=odbcDriverConnect("driver={sql server};
server=LAPTOP-6L9UT2CT\MANI;
database=Sales_DW;
trusted_connection=TRUE")
conn=odbcDriverConnect("driver={sql server};
server=LAPTOP-6L9UT2CT\MANI;
database=Sales_DW;
trusted_connection=TRUE")
conn=odbcDriverConnect("driver={sql server};
server='LAPTOP-6L9UT2CT\MANI';
database='Sales_DW';
trusted_connection=TRUE")
conn=odbcDriverConnect("driver={sql server};
server="LAPTOP-6L9UT2CT\MANI"";
database='Sales_DW';
trusted_connection=TRUE")
conn=odbcDriverConnect("driver={sql server};
server=LAPTOP-6L9UT2CT\MANI;
database=Sales_DW;
trusted_connection=TRUE")
conn=odbcDriverConnect("driver={sql server};
server=LAPTOP-6L9UT2CT\MANI;
database=Sales_DW;
trusted_connection=TRUE")
conn=odbcDriverConnect("driver={sql server};
server=LAPTOP-6L9UT2CT\MANI;
database=Sales_DW;
trusted_connection=TRUE")
conn=odbcDriverConnect("Driver={SQL server};
server=LAPTOP-6L9UT2CT\\MANI;
database=Sales_DW;
trusted_connection=TRUE")
install.packages('RODBC')
require(RODBC)
conn=odbcDriverConnect("Driver={SQL server};
server=LAPTOP-6L9UT2CT\\MANI;
database=Sales_DW;
trusted_connection=TRUE")
conn
pie_data = sqlQuery(conn, "Select sum(sf.Dollarssold) as sales,s.StoredId from Sales_Fact sf
INNER JOIN Store_Dim s
ON sf.StoreKey = s.Storekey
Group By s.StoreId")
Group By s.StoreId")
pie_data
pie_data
pie_data = sqlQuery(conn, "Select sum(sf.Dollarssold) as sales,s.StoredId from Sales_Fact sf
INNER JOIN Store_Dim s
ON sf.StoreKey = s.Storekey
Group By s.StoreId")
pie_data
bar_data = sqlQuery(conn, "
Select p.ProductName,p.ProductCategoryName,
Sum(sf.DollarsSold) as Sales
From Product_Dim p
Inner Join sales_Fact sf
On p.productKey = sf.ProductKey
Inner Join Calendar_Dim c on sf.CalendarKey = c.CalendarKey
where c.Year_=2003
group By p.ProductName,p.ProductCategoryName")
bar_data
barplot(bar_data$Sales,main = "sales_per product in 2013",
Xlab="products",ylab = "sales",
col=rainbow(length(unique(bar_data$ProductCategoryName))),
names.arg = bar_data$ProductName,names.cex=0.6,
length.text=unique(bar_data$ProductCategoryName))
hist_data = sqlQuery(conn, "
Select Sum(sf.UnitsSold) as productcount, sf.TID
from Sales_Fact sf
inner join Calendar_Dim c
on sf.CalendarKey = c.CalendarKey
where c.Year_=2013
Group by sf.TID")
hist_data
cars
plot(x=cars$speed,y=cars$dist,xlab="speed", ylab="distance",
main = "car Speed Vs Stopping distance",xlim = c(4,25), ylim = c(1,100))
plot(x=cars$speed,y=cars$dist,xlab="speed", ylab="distance",
main = "Car Speed Vs Stopping distance",xlim = c(4,25), ylim = c(1,100))
plot(x=cars$speed,y=cars$dist,xlab="speed", ylab="distance",
main = "Car Speed Vs Stopping distance",xlim = c(4,25), ylimit = c(1,100))
plot(x=cars$speed,y=cars$dist,xlab="speed", ylab="distance",
main = "Car Speed Vs Stopping distance",xlim = c(4,25), ylim = c(1,100))
plot(iris$Sepal.Length~iris$Species, xlab="Species", ylab = "Sepal Lenght",
main="Spred of data in sepal Length",
names=c("Setosa","versicolor","virginica"), col=c("red","blue","yellow"))
line_data
line_data = sqlQuery(conn, "
Select count(sf.CustomerKey) as Transcount, s.storeId
from sales_fact sf
Inner join Store_Dim s
ON sf.Storekey = s.StoreKey
Group by s.StoreId")
line_data
Data<- read.csv("responses.csv")
Data
Data
view(data)
view(Data)
head(Data)
Data <- filter(Data, between(Your age is __., 24, 28))
Data <- filter(Data, between("Your age is __.", 24, 28))
Data <- filter(Data, between(Your age is __, 24, 28))
Data <- filter(Data, between('Your age is __.', 24, 28))
Data <- filter(data,between(data,24,28)
Data
Data <- filter(data,between(data,24,28))
hist(Data)
Data<- read.csv("responses.csv")
Data
filter(data, age >= "24" &  <="28")
filter(data, age > "24" &  < "28")
filter(data,data$Age > "24" &  < "28")
filter_Age<-subset(data,data$Age > "24" &  < "28")
filter_Age<-subset(data,data$Age > "24" & data$Age < "28")
filter(data,Age > "24" & Age < "28")
filter(data,Age > "24" & Age < "28")
temp<-filter(Data, Age == "24")
Data
temp<-filter(Data, Age == "24")
temp<-filter(Data, Age == 24)
temp<-filter(Data, data$Age == 24)
filter_age<-(Data,Data$Age>=24 & Data$Age<=28)
filter_age <- (Data, Data$Age>=24 & Data$Age<=28)
filter_age <- (Data, Data$Age>=24 & Data$Age<=28);
filter_Age <- subset(Data, Data$Age>=24 & Data$Age<=28)
filter_Age
filter_Age
Data
Data<- read.csv("responses.csv")
Data
Data<- read.csv("responses.csv")
Data
options(max.print=999999)
Data<- read.csv("responses.csv")
Data
filter_Age <- subset(Data, Data$Age>=24 & Data$Age<=28)
filter_Age
hist(filter_Age)
hist(as.numeric(filter_Age))
cars
plot(x=cars$speed,y=cars$dist,xlab="speed", ylab="distance",
main = "Car Speed Vs Stopping distance",xlim = c(4,25), ylim = c(1,100))
plot(x=cars$speed,y=cars$dist,xlab="speed", ylab="distance",
main = "Car Speed Vs Stopping distance",xlim = c(20,25), ylim = c(1,100))
conn=odbcDriverConnect("Driver={SQL server};
server=LAPTOP-6L9UT2CT\\MANI;
database=Sales_DW;
trusted_connection=TRUE")
require(RODBC)
require(RODBC)
conn=odbcDriverConnect("Driver={SQL server};
server=LAPTOP-6L9UT2CT\\MANI;
database=Sales_DW;
trusted_connection=TRUE")
conn
pie_data = sqlQuery(conn, "Select sum(sf.Dollarssold) as sales,s.StoredId from Sales_Fact sf
INNER JOIN Store_Dim s
ON sf.StoreKey = s.Storekey
Group By s.StoreId")
pie_data
pie_data = sqlQuery(conn, "Select sum(sf.Dollarssold) as sales,s.StoreId from Sales_Fact sf
INNER JOIN Store_Dim s
ON sf.StoreKey = s.Storekey
Group By s.StoreId")
pie_data
Data<- read.csv("responses.csv")
Data
options(max.print=999999)
filter_Age <- subset(Data, Data$Age>=24 & Data$Age<=28)
filter_Age
#(i)
#Load the data
library(boot)
head(channing)
data("channing")
head(channing)
data(channing)
data
data()
data(channing)
head(channing)
str(channing)
#(iii)
meanchanning$entry
mean(channing$entry)
y<-x/2
x<-mean(channing$entry)
y<-x/2
round(x,1)
which.min(channing$entry)
channing(319,)
which.min(channing$entry)
channing(319,')
channing(319,1)
x<- channing(319,1)
x
channing
which.min(channing$entry)
hich.min(channing$entry)
channing(319,1)
which.min(channing$entry)
channing(319,1)
delete.response(channing$cens)
data(channing)
head(channing)
data(channing)
library(boot)
data(channing)
library(boot)
data(channing)
head(iris)
head(iris)
library(boot)
data(channing)
head(channing)
help(channing)
str(channing)
x<-mean(channing$entry)
y<-x/2
round(x,1)
y<-x/2
round(y,1)
which.min(channing$entry)
channing(319,1)
x<-channing(319,1)
channing[319,1]
which.min(channing$entry)
channing[319,1]
status<- as.factor(channing$cens)
status<-gsub("0","Dead",status)
status<-gsub("1","alive",status)
cbind(channing,status)
channing[-5]
Channing$cens<-null
Channing$cens<-Null
channing[5]
channing[+5]
channing[-5]
data(channing)
lp(channing)
help(channing)
head(channing)
Channing$cens<-null
channing$cens<- NULL
head(channing)
cbind(channing,status)
table(channing$cens)
table
table(channing$cens)
table(channing$cens)
aggregate(channing[2:4],by=list(p,q),FUN = mean)
p<-as.factor(channing$cens)
p<-as.factor(channing$sex)
q<-as.factor(channing$sex)
aggregate(channing[2:4],by=list(p,q),FUN = mean)
library(MASS)
data(Cars93)
help(Cars93)
dim(Cars93)
data(Cars93)
data
head(Cars93)
boxplot(price)
boxplot(cars93$price)
boxplot(cars93$price,cars93$DriveTrain)
boxplot(cars93$price~cars93$DriveTrain)
boxplot(Cars93$price~Cars93$DriveTrain)
boxplot(Cars93$Price~Cars93$DriveTrain)
boxplot(Cars93$Price,Cars93$DriveTrain)
boxplot(Cars93$Price~Cars93$DriveTrain)
boxplot(Cars93$Price~Cars93$DriveTrain,plot=F)
boxplot(Cars93$Price~Cars93$DriveTrain)
boxplot(Cars93$Price~Cars93$DriveTrain,,plot=F)
boxplot(Cars93$Price~Cars93$DriveTrain,,colors=blues9)
boxplot(Cars93$Price~Cars93$DriveTrain,,colors=blue)
oxplot(Cars93$Price~Cars93$DriveTrain,,col=blue)
oxplot(Cars93$Price~Cars93$DriveTrain,,col=c("gold","darkgreen","blue"))
boxplot(Cars93$Price~Cars93$DriveTrain,,col=c("gold","darkgreen","blue"))
boxplot(Cars93$Price~Cars93$DriveTrain,col=c("gold","darkgreen","blue"))
boxplot(Cars93$Price~Cars93$DriveTrain,col=c("gold","darkgreen","blue"),main="Cars93", xlab="Price",ylab ="DriveTrain")
dnorm(0:2, mean=0, sd=1)
X<- my.dnorm(0:2,0,1)
my.dnorm <- (0:2,mean=0,sd=1)
my.dnorm <- (0:2)
shiny::runApp('C:/Manikanta/Dublin Business School/Assignment/statistics/Shinny/New_shinny_try')
runApp('C:/Manikanta/Dublin Business School/Assignment/statistics/Shinny/Girish')
y=data$Fertility
x1=data$Agriculture
x2=data$Examination
x3=data$Education
x4=data$Catholic
df=data.frame( x1,x2,x3,x4,y)
fit <- glm(y ~ x1+x2+x3+x4, data = dataset1, family='gaussian')
data = read.table(file="http://users.stat.ufl.edu/~aa/cda/data/Crabs.dat", header = TRUE)
head(data)
data = read.table(file="http://users.stat.ufl.edu/~winner/data/nfl2008_fga.csv", header = TRUE)
head(data)
y=data$homekick
data = read.table(file="http://users.stat.ufl.edu/~winner/data/nfl2008_fga.csv", header = TRUE)
head(data)
y=data$homekick #target variable
x1 = data$togo
x2 = data$ydline
x3 = data$kicker
data=na.omit(data.frame(y,x1,x2,x3))
head(data)
#R-Code
data = read.table(file="http://users.stat.ufl.edu/~winner/data/nfl2008_fga.csv")
#R-Code
data = read.table(file="http://users.stat.ufl.edu/~winner/data/nfl2008_fga.csv")
head(data)
y=data$homeKick #target variable
x1 = data$togo
x3 = data$kicker
data=na.omit(data.frame(y,x1,x2,x3))
head(data)
n=nrow(data)
data
indexes = sample(n,n*(80/100))
trainset = dataset[indexes,]
trainset = data[indexes,]
head(trainset)
#R-Code
data = read.csv(file="http://users.stat.ufl.edu/~winner/data/nfl2008_fga.csv")
head(data)
y=data$homeKick #target variable
x1 = data$togo
x2 = data$ydline
x3 = data$kicker
data=na.omit(data.frame(y,x1,x2,x3))
head(data)
data=na.omit(data.frame(y,x1,x2,x3))
y = data$homekick #target variable
x1 = data$togo
x2 = data$ydline
x3 = data$kicker
data=na.omit(data.frame(y,x1,x2,x3))
head(data)
data = read.csv("http://users.stat.ufl.edu/~winner/data/nfl2008_fga.csv")
head(data)
y = data$homekick #target variable
x1 = data$togo
x2 = data$ydline
x3 = data$kicker
data=na.omit(data.frame(y,x1,x2,x3))
head(data)
testset = data[-indexes,]
head(testset)
n=nrow(data)
indexes = sample(n,n*(80/100))
testset = data[-indexes,]
head(testset)
logistic_trainedset = glm(y~., trainset, family="binomial")
logistic_trainedset = glm(y~., trainset, family="binomial")
logistic_trainedset = glm(y~., trainset, family="binomial")
logistic_trainedset = glm(y~., trainset, family="binomial")
n=nrow(data)
indexes = sample(n,n*(80/100))
testset = data[-indexes,]
logistic_trainedset = glm(y~., trainset, family="binomial")
logistic_trainedset = glm(y~.,trainset,family = "binomial")
logistic_trainedset = glm(y~,trainset,family = "binomial")
logistic_trainedset = glm(y~.,trainset,family = "binomial")
trainset.glm <- glm(Out~., trainset, family="gaussian")
fit = glm(y ~., data= dataset, family='gaussian') #Fitting the Model
logistic_trainedset = glm(y ~.,trainset,family = "binomial")
logistic_trainedset = glm(y ~., data= trainset, family='binomial')
logistic_trainedset = glm(y ~.,trainset, family='binomial')
logistic_trainedset = glm(y ~.,trainset, family='binomial');
logistic_trainedset = glm(y ~., trainset, family='binomial')
logistic_trainedset = glm(y ~., trainset, family='binomial')
logistic_trainedset = glm(y~., trainset, family='binomial')
logistic_trainedset = glm(y ~., trainset, family = "binomial")
logistic_trainedset = glm(y ~, trainset, family = "binomial")
logistic_trainedset = glm(y ~., trainset, family = "binomial")
data = read.csv("http://users.stat.ufl.edu/~winner/data/nfl2008_fga.csv")
y = data$homekick #target variable
x1 = data$togo
x2 = data$ydline
x3 = data$kicker
data=na.omit(data.frame(y,x1,x2,x3))
n=nrow(data)
indexes = sample(n,n*(80/100))
trainset = data[indexes,]
testset = data[-indexes,]
logistic_trainedset = glm(y ~., trainset, family = "binomial")
summary(logistic_trainedset)
phat_i = predict(logistic_trainedset, testset , type="response")
l= length(phat_i)
prediced_val = rep(0,l)
prediced_val [phat_i>0.5]=1
prediced_val
df = data.frame(actual= testset[,1], predicted= prediced_val)
view(df)
df
view(df)
confusion_matrix = table(predicted_val, actual= testset[,1])
confusion_matrix = table(prediced_val, actual= testset[,1])
confusion_matrix
nrow(testset[testset&y==0,])
confusion_matrix = table(prediced_val, actual= testset[,1])
accuracy = mean(prediced_val == testset[,1])
accuracy
confusion_matrix
data = read.csv("http://users.stat.ufl.edu/~winner/data/nfl2008_fga.csv")
y = data$homekick #target variable
x1 = data$togo
x2 = data$ydline
x3 = data$kicker
data=na.omit(data.frame(y,x1,x2,x3))
head(data)
n=nrow(data)
#sampling the data by 80%
indexes = sample(n,n*(80/100))
#gathering 80% trainset
trainset = data[indexes,]
head(trainset)
#gathering 20% trainset
testset = data[-indexes,]
head(testset)
n=nrow(data)
#sampling the data by 80%
indexes = sample(n,n*(80/100))
#gathering 80% trainset
trainset = data[indexes,]
head(trainset)
logistic_trainedset = glm(y ~., trainset, family = "binomial")
summary(logistic_trainedset)
phat_i = predict(logistic_trainedset, testset , type="response")
l= length(phat_i)
prediced_val = rep(0,l)
prediced_val [phat_i>0.5]=1
prediced_val
df = data.frame(actual= testset[,1], predicted= prediced_val)
df
nrow(testset[testset&y==0,])
confusion_matrix = table(prediced_val, actual= testset[,1])
accuracy = mean(prediced_val == testset[,1]) #correctness of prediction
accuracy
confusion_matrix
nrow(testset[testset&y==0,])
confusion_matrix = table(prediced_val, actual= testset[,1])
accuracy = mean(prediced_val == testset[,1]) #correctness of prediction
accuracy
confusion_matrix
install.packages("shinydashboard")
install.packages("ggiraph")
install.packages("ggiraphExtra")
install.packages("plyr")
shiny::runApp('C:/Manikanta/Dublin Business School/Assignment/statistics/Shinny/Shinny_final')
runApp('C:/Manikanta/Dublin Business School/Assignment/statistics/Shinny/Shinny_final')
return()
updateSelectInput(session, "selectPredictorSlr",
choices = selectFields,selected = selectFields[1])#setting default of predtictor to first column
shiny::runApp()
shiny::runApp()
